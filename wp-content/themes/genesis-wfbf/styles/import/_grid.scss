 @mixin grid( $size ) {
     [class*="cols-#{$size}"] {
        float : left;
        &.end { float: right; }
     }

    @for $i from 0 through $gridcols {
        .cols-#{$size}-#{$i} {
            width: percentage( $i / $gridcols );
        }
        .cols-#{$size}-push-#{$i} {
            position: relative;
            left: percentage( $i / $gridcols );
            right: auto;
        }
        .cols-#{$size}-pull-#{$i} {
            position: relative;
            right: percentage( $i / $gridcols);
            left: auto;
        }
        .cols-#{$size}-offset-#{$i} {
            margin-left: percentage( $i / $gridcols );
        }
    }
    [class*="cols-"] {
		&.#{$size}-reset-order {
		    float: left;
		    left: auto;
		    right: auto;
		    margin-left: 0;
		    margin-right: 0;
		}
		&.#{$size}-centered {
		    margin-left: auto;
		    margin-right: auto;
		    float: none;
		}
		&.#{$size}-uncentered {
		    float: left;
		    margin-left: 0;
		    margin-right: 0;
		}
		&.#{$size}-end { float: left; } // keeps last child from getting float: right
		&.#{$size}-centered:last-child { float: none; } // keep last-child from getting float: right
		&.#{$size}-uncentered:last-child { float: left; } // keep last-child from getting float: right
		&.#{$size}-uncentered.opposite { float: right; }
		.row-container, .grid-container {
		    &.#{$size}-collapse > .column {
		        padding-right: 0;
		        padding-left: 0;
		    }
		    &.#{$size}-collapse .row {
		        margin-left: 0;
		        margin-right: 0;
		    }
		    &.#{$size}-uncollapse > .column {
		        padding-right: $gutter;
		        padding-left: $gutter;
		    }
		}
    }
}

.row-container, .grid-container, .row, .grid {
    margin: 0;
    margin-left: 0 - $gutter;
    margin-right: 0 - $gutter;
    padding: 0;
    box-sizing: border-box;
    @include clearfix;
    &.collapse > [class*="cols-"] {
        padding-right: 0;
        padding-left: 0;
    }
    &.collapse > .uncollapse {
        padding-right: $gutter;
        padding-left: $gutter;
    }
    &.inline {
        > [class*="cols-"] {
            display: inline-block;
            vertical-align: top;
        }
    }
}

 // Some flexbox stuff
.row-container, .grid-container, .row, .grid {
    &.flexwrap, &.flexrow {
        @include flexbox( 'row' );
        &:before, &:after {
            content: initial;
        }
        &.centered {
            justify-content: center;
        }
    }
    &.flexwrap {
        flex-wrap: wrap;
    }
    .flexcol {
    	@include flexbox();
    	> div, .flex-container {
    		display: block;
    		flex: 1;
    	}
    }
}
 // Remove margin for grid
.grid-container, .grid {
    margin: 0;
}
.flex-column-section {
	.row {
		@include flexbox( 'row' );
		&:before, &:after {
		    content: initial;
		}
		flex-wrap: wrap;
	}
}

[class*="cols-base-"],
[class*="cols-xs-"],
[class*="cols-sm-"],
[class*="cols-md-"],
[class*="cols-lg-"],
[class*="cols-xl-"],
[class*="cols-hd-"] {
    padding-right: $gutter;
    padding-left: $gutter;
    display: block;
    width: 100%;
    float: none;
    box-sizing: border-box;
    &.collapse {
        padding-right: 0;
        padding-left: 0;
    }
} // end .column
// Base Grid
@include grid( 'base' );

.fl-col-group {
	padding: 0;
}
.fl-col {
	.fl-col-content {
		margin-right: var( --gutter );
		margin-left: var( --gutter );
	}
	&.fl-col-has-cols {
		> .fl-col-content {
			margin-right: 0;
			margin-left: 0;
		}
	}
}

.fl-row {
	// .fl-col-content {
	// 	margin-right: var( --gutter );
	// 	margin-left: var( --gutter );
	// }
	.fl-row-content-wrap {
		padding-left: var( --gutter );
		padding-right: var( --gutter );
		// padding-top: var( --padding );
		// > .fl-row-content {
		// 	margin-left: calc( 0px - var( --gutter ) );
		// 	margin-right: calc( 0px - var( --gutter ) );
		// }
	}
	.fl-module-content {
		margin-bottom: var( --padding );
	}
}

.fl-builder-content {
	/**
	 * Top Level Rows
	 */
	> .fl-row {
		> .fl-row-content-wrap {
			margin-left: calc( -1 * var( --gutter ) );
			margin-right: calc( -1 * var( --gutter ) );
		}
	}
}

:root {
	--gutter : #{$gutter};
	--padding : #{$padding};
}

// Iterate over our breakpoint map to create the grid
@each $breakpoint, $size in $breakpoints {
    @include breakpoint( $breakpoint ) {
        @include grid( $breakpoint );
    }
}